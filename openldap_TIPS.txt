Download from :
ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release

Openldap2.2

   # cd ../openldap-2.4.28

   # ./configure –with-tls=openssl

   # make depend

   # make

   # make test

   # make install

If error of "error: BDB: BerkeleyDB not available" comes while running configure  then install BDB first.

    [root@vipin ~]#  cd  /opt

    [root@vipin opt]#  wget  http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz

    [root@vipin opt]#  tar –zxvf  db-4.8.30.NC.tar.gz

    [root@vipin opt]#   cd db-4.8.30.NC

    [root@vipin db-4.8.30.NC]#  cd  build_unix
    [root@vipin db-4.8.30.NC]# ../dist/configure --prefix=/usr/local/db4
    [root@vipin db-4.8.30.NC]#  make
    [root@vipin db-4.8.30.NC]#  make install



export CPPFLAGS="-I/usr/local/db4/include"
export LDFLAGS="-L/usr/local/db4/lib -Wl,-R,/usr/local/db4/lib -Wl,--enable-new-dtags"
# Build OpenLDAP
export LD_LIBRARY_PATH="/usr/local/db4/lib"

then ./configure   in ldap 

make depend
make 
make install

If error in make   "ltdl.h" not found 
install
sudo yum install libtool-ltdl-devel

in Makefiles in CPPFLAGS = -D_GNU_SOURCE   to resolve few errors.
still error :  "DB_XIDDATASIZE" undefines 
declare an int DB_XIDDATASIZE=128  in back_bdb/ctxcsn.c   file

**********************************
vi /extra/vipin/Documents/FosteringLinux/TCS_linuxDriver/openldap-2.3.9/libraries/liblutil/Makefile

AC_CFLAGS = -g -O2 -D_GNU_SOURCE

******************************************
After compile , make install successfull
running slapd server: on port 9011 on localhost
 sudo /usr/local/libexec/slapd -f ./slapd.conf -n slapd -4  -d -1 -h ldap://127.0.0.1:9011/

for DB_CONFIG not found issue cp as below:
sudo cp /usr/local/etc/openldap/DB_CONFIG.example  /var/lib/ldap/LDAPDB_AHQ/DB_CONFIG

To query this ldap server for some data 
[vipin@localhost tests]$ ../clients/tools/ldapsearch -P 3 -x -LLL -b cn=Subschema -s base -h localhost -p 9011 '(&(objectClasses=top)(objectClasses=2.5.6.0))' cn objectClass
dn: cn=Subschema
objectClass: top
objectClass: subentry
objectClass: subschema
objectClass: extensibleObject
cn: Subschema


for offline loading of .ldif ( text format data) to LDAP db 
sudo /usr/local/sbin/slapadd -l ./ldap_backup_15oct2015.ldif -f ./slapd.conf -d -1 
LDAP DB localtion : /var/lib/ldap/LDAPDB_AHQ/  ( as defined in slapd.conf)

***************

You should use slapadd if you need to restore an LDIF file generated with slapcat. The slapadd man page says: "The output of slapcat is intended to be used as input to slapadd(8). The output of slapcat cannot generally be used as input to ldapadd(1) or other LDAP clients with‐ out first editing the output. This editing would normally include reordering the records into superior first order and removing no-user-modification operational attributes." – Janne Pikkarainen Jul 14 '11 at 10:14
Oh - you can generate an ldapadd compatible LDIF with 

ldapsearch -L [your_other_options] >your_data.ldif 

***********************************************************
389 DS 
sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

enable repository
[vipin@localhost ~]$ sudo subscription-manager repos --enable "rhel-*-optional-rpms" --enable "rhel-*-extras-rpms"  --enable "rhel-ha-for-rhel-*-server-rpms"
install 389
[vipin@localhost ~]$  sudo yum install 389-ds-base


Install the server and the admin server/java console

yum install 389-ds-base 389-admin 389-ds-console 389-admin-console setup-ds-admin.pl

SETUP:
/usr/sbin/setup-ds-admin.pl

user/pass  admin/admin
Directory Manager DN [cn=Directory Manager]: 
Password:  admin@123

log file : /tmp/setupmqIS_K.log

to start  directory server
/usr/sbin/start-ds-admin
to start management console to connect to directory server 
$ 389-console  
 url:  http://<serverIP>:3890 /     user , dn= Directory Server, admin@123  


************************************ varad 20 July ****************************
ldapsearch -xh <hostname/IP> -D "cn=root,c=IN" -w "<password>" -b "c=IN" > <export-filename.ldif> 


ldapmodify -xh <389-server-ip/hostname> -D "cn=Directory Manager" -w "admin@123" -a -c -f <above_export-filename.ldif>
*******************************************************

To install and run LDAP Browser APCHE  very good tool 
https://directory.apache.org/studio/downloads.html

run 
/extra/vipin/Documents/FosteringLinux/TCS_linuxDriver/ApacheDirectoryStudio/ApacheDirectoryStudio


TO list all schema 
ldapsearch -H ldap://localhost:9011 -x -s base -b "cn=subschema" objectclasses
ldapsearch -H ldap://localhost:9011 -x -s base -b "cn=schema" objectclasses    [ in 389 DS]

To list all object classes 
ldapsearch  -H ldap://localhost:389 -D "cn=Directory Manager" -w admin@123 -b "cn=schema" -s base  objectclass=* objectclasses


ldapsearch -xh <hostname/IP> -D "cn=root,c=IN" -w "<password>" -b "c=IN" > <export-filename.ldif> 


ldapmodify -xh <389-server-ip/hostname> -D "cn=Directory Manager" -w "admin@123" -a -c -f <above_export-filename.ldif>

grep -i -e "^dn:" -e "^objectclass" ldap.ldif >dnlist_1

cat dnlist_1_temp|sed -n "/^dn:/,/^dn/p" |sed ':a;N;$!ba;s/\n/ /g' |sed "s/dn:/\ndn:/g" >dnlist_2
awk 'END{print _}{_+=NF-1}' FS="hello" 

https://www.ibm.com/support/knowledgecenter/en/SSVJJU_6.2.0/com.ibm.IBMDS.doc_6.2/admin_gd13.htm
**********************************************************

to migrate from old ldap to new  389 DS

1. first check if any boolean or numeric attribute then it is not required to provide string and substring match
2. Then use the script from "here" link ( not he one in web page) of link https://directory.fedoraproject.org/docs/389ds/howto/howto-openldapmigration.html
3. ./ol-schema-migrate.pl -b Awan_all.schema > All_DS1.ldif
    Awan_all.schema contains all  attribute and ObjectClass , All_DS1.ldif will have all the attributes and objectclass sorted and beutified.

Sample:  Awan_all.schema 
[vipin@localhost scripts]$ head -n 30 Awan_all.schema
objectclass ( 2.5.6.22 NAME 'pkiCA' SUP top AUXILIARY
        MUST ( cn )
        MAY ( ou $ authorityRevocationList $ certificateRevocationList $ 
		deltaRevocationList $ cACertificate $ 
		crossCertificatePair $ serialNumber ) )

objectclass ( 2.5.6.21 NAME 'pkiUser' SUP top AUXILIARY
        MUST ( cn $ userCertificate )
        MAY ( ou $ rfc822Mailbox $ serialNumber ) )
attributetype ( 2.16.840.1.113730.3.1.1.1.1.5.1
        NAME 'AwanMaxSecClass'
        DESC 'This is highest security classification allowed'
        
        
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{50}
         )
attributetype ( 2.16.840.1.113730.3.1.1.1.1.5.2
        NAME 'AwanListOfRanks'
        DESC 'This contains permitted Ranks'
        EQUALITY caseExactMatch
        
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{200}
        )

Sample ldapmodify -c -H ldap://localhost:389 -D "cn=Directory Manager" -x -w admin@123 -f Awan_all_Objects.ldif
: 
[vipin@localhost scripts]$ head -n 30 All_DS1.ldif
#
################################################################################
#
dn: cn=schema
#
################################################################################
#
attributeTypes: (
  2.16.840.1.113730.3.1.1.1.1.5.1
  NAME 'AwanMaxSecClass'
  DESC 'This is highest security classification allowed'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{50}
  )
#
################################################################################
#
attributeTypes: (
  2.16.840.1.113730.3.1.1.1.1.5.2
  NAME 'AwanListOfRanks'
  DESC 'This contains permitted Ranks'
  EQUALITY caseExactMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{200}
  )
#
################################################################################
#
attributeTypes: (
  2.16.840.1.113730.3.1.1.1.1.5.3
  NAME 'AwanSignalTypes'
  DESC 'This indicates if the Signal is NORMAL/SITREP'

4. use  SEd  to takeout only objectypes and objectClass
cat  All_DS1.ldif | sed -n "/^objectClasses:/,/)/p" >All_Object_DS2.ldif
cat  All_DS1.ldif | sed -n "/^attributeTypes:/,/)/p" >All_Attr_DS2.ldif

5.  add following in respective Object and Attr files.
dn: cn=schema
changetype: modify
add: attributeTypes

dn: cn=schema 
changetype: modify
add: objectclasses

6. ldapmodify to insert new attributes and Objectclasse

ldapmodify -c -H ldap://localhost:389 -D "cn=Directory Manager" -x -w admin@123 -f Awan_all_Objects.ldif

ldapmodify -c -H ldap://localhost:389 -D "cn=Directory Manager" -x -w admin@123 -f Awan_all_Attr.ldif

*********************************************************************************************
Tool to convert ldif to diagram 
http://marcin.owsiany.pl/ldif2dot-page

ldapsearch -x -b 'dc=nodomain' | \
      ldif2dot | \
      dot -o nodomain.png -Nshape=box -Tpng /dev/stdin

To see all schema
ldapsearch -x -H ldap://localhost:389 -b "cn=schema" -s base -D "cn=Directory Manager" -w admin@123 objectClasses| grep organization 
objectClasses: ( 2.5.6.4 NAME 'organization' SUP top STRUCTURAL MUST o MAY ( u
objectClasses: ( 2.5.6.7 NAME 'organizationalPerson' SUP person STRUCTURAL MAY
objectClasses: ( 2.5.6.8 NAME 'organizationalRole' SUP top STRUCTURAL MUST cn 
objectClasses: ( 2.5.6.5 NAME 'organizationalUnit' SUP top STRUCTURAL MUST ou 
objectClasses: ( 2.16.840.1.113730.3.2.2 NAME 'inetOrgPerson' SUP organization
  objectclass' SUP organizationalUnit STRUCTURAL MAY nsAdminDomainName X-ORIGI

***************************************************************************************************

base64 conversion Unix command base64

$ echo 'this is sanfoundry linux tutorial' | base64
dGhpcyBpcyBzYW5mb3VuZHJ5IGxpbnV4IHR1dG9yaWFsCg==

2. To decode, use base64 -d.

$ echo 'dGhpcyBpcyBzYW5mb3VuZHJ5IGxpbnV4IHR1dG9yaWFsCg==' | base64 -d
this is sanfoundry linux tutorial

3. Wrap lines while encoding using -w option

$ echo 'this is sanfoundry linux tutorial' | base64 -w 10
dGhpcyBpcy
BzYW5mb3Vu
ZHJ5IGxpbn
V4IHR1dG9y
aWFsCg==


for hex dump of base64 data 

$ echo -n "7WkoOEfwfTTioxG6CatHBw==" | base64 -d | od -t x8 -An
 347df047382869ed 0747ab09ba11a3e2
$ 

x8 can be changed to x1  to get single byte separated output.

*******************
static const char Base64[] =
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const char Pad64 = '=';

/* (From RFC1521 and draft-ietf-dnssec-secext-03.txt)
   The following encoding technique is taken from RFC 1521 by Borenstein
   and Freed.  It is reproduced here in a slightly edited form for
   convenience.

   A 65-character subset of US-ASCII is used, enabling 6 bits to be
   represented per printable character. (The extra 65th character, "=",
   is used to signify a special processing function.)

   The encoding process represents 24-bit groups of input bits as output
   strings of 4 encoded characters. Proceeding from left to right, a
   24-bit input group is formed by concatenating 3 8-bit input groups.
   These 24 bits are then treated as 4 concatenated 6-bit groups, each
   of which is translated into a single digit in the base64 alphabet.

   Each 6-bit group is used as an index into an array of 64 printable
   characters. The character referenced by the index is placed in the
   output string.

                         Table 1: The Base64 Alphabet

      Value Encoding  Value Encoding  Value Encoding  Value Encoding
          0 A            17 R            34 i            51 z
          1 B            18 S            35 j            52 0
          2 C            19 T            36 k            53 1
          3 D            20 U            37 l            54 2
          4 E            21 V            38 m            55 3
          5 F            22 W            39 n            56 4
          6 G            23 X            40 o            57 5
          7 H            24 Y            41 p            58 6
          8 I            25 Z            42 q            59 7
          9 J            26 a            43 r            60 8
         10 K            27 b            44 s            61 9
         11 L            28 c            45 t            62 +
         12 M            29 d            46 u            63 /
         13 N            30 e            47 v
         14 O            31 f            48 w         (pad) =
         15 P            32 g            49 x
         16 Q            33 h            50 y

   Special processing is performed if fewer than 24 bits are available
   at the end of the data being encoded.  A full encoding quantum is
   always completed at the end of a quantity.  When fewer than 24 input
   bits are available in an input group, zero bits are added (on the
   right) to form an integral number of 6-bit groups.  Padding at the
   end of the data is performed using the '=' character.

   Since all base64 input is an integral number of octets, only the
         -------------------------------------------------                       
   following cases can arise:
   
       (1) the final quantum of encoding input is an integral
           multiple of 24 bits; here, the final unit of encoded
	   output will be an integral multiple of 4 characters
	   with no "=" padding,
       (2) the final quantum of encoding input is exactly 8 bits;
           here, the final unit of encoded output will be two
	   characters followed by two "=" padding characters, or
       (3) the final quantum of encoding input is exactly 16 bits;
           here, the final unit of encoded output will be three
	   characters followed by one "=" padding character.
   */
***************************************************************************************************

KeyCLoak  SSO  and ldap  -- docker based

https://medium.com/@xavier.hahn/asp-net-core-angular-openid-connect-using-keycloak-6437948c008
https://github.com/osixia/docker-openldap

docker run -p 389:389 -p 636:636 --name my-openldap-container --detach osixia/openldap:1.3.0
docker run --name keycloak -p 8080:8080 -e KEYCLOAK_USER=<USERNAME> -e KEYCLOAK_PASSWORD=<PASSWORD> jboss/keycloak

FREEIPA:
https://www.freeipa.org/page/V4/chained_compat_tree
