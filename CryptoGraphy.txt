vipin@vipin:.ssh$ cat id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDODS1IoOoKWz0WQSLFDvfpbbgWx26Q1PUP1Aa4Dkp5N8Z8yCD9YPUL7w5HximrLSfY4eQqu/UkY6dJm/dMtF9/kclxXw6zkS+hCV4sIy92a3AxV2cvW52ozmfTRi0hSto0MConTDUAIj8LxNCJJHJNxMrlKtbTj/wguUzNJSs56uuKvv8hMEicKNo39h5W7ceqTOKuKrn6d/C4DhbhCxkwedW3AWusBLAVBBbZw1bGwhsbeLWoseMkcyujG9MWD1cE9pz4bqEjiIf4fCDigSntbQKQVHA1FUw4kxqTGDFpS736dDqyO0IopEGWfutsww7tMP2lpF5gSB1fl5gPsMZf vipin@vipin
vipin@vipin:.ssh$ cat id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAzg0tSKDqCls9FkEixQ736W24FsdukNT1D9QGuA5KeTfGfMgg
/WD1C+8OR8Ypqy0n2OHkKrv1JGOnSZv3TLRff5HJcV8Os5EvoQleLCMvdmtwMVdn
L1udqM5n00YtIUraNDAqJ0w1ACI/C8TQiSRyTcTK5SrW04/8ILlMzSUrOerrir7/
ITBInCjaN/YeVu3Hqkziriq5+nfwuA4W4QsZMHnVtwFrrASwFQQW2cNWxsIbG3i1
qLHjJHMroxvTFg9XBPac+G6hI4iH+Hwg4oEp7W0CkFRwNRVMOJMakxgxaUu9+nQ6
sjtCKKRBln7rbMMO7TD9paReYEgdX5eYD7DGXwIDAQABAoIBAFNpXiWCjnu2x5nU
sGCZWJ50PgtqnEWhD7til322u0sq2vz0fvZTY597HIrNm1yiIPlZKGZsRCaA+N2B
d7Dja61WtPdiBa+HXIKSKj8v1yzW/UncGfc/3SjStZD/XZGWnZJ21PmnjeUJ9/+p
osmBqYv12DTBDMoEBYqxuHdrTn5Y8sAtIu353P5jxZojoZ8tlDFWVWf/tfviTeBi
2W4BNMVddMKpzTTQeaEsN4OYw4FJQja+n03TKubj1xk59pdDjvRdWGGIIH9JMtrV
/EFeKEIu7tRuZiXS8pb8jq/JZjfay/urD8DHelqeGSL+eA1iFpgpgoaWr5HhqDKC
+maQ7GECgYEA9Nzd54nae7qpEBiRzPAElaI9KZV8EjmHfzJM4CRm7A97j443bFwy
0bADbHoyzzOBDrvFbkN6TQ79Ovz381dTfFi87YmU1Xc4ZO69+HZFnbCMnOgX5His
dw9SponzkeiRPawnIa4wrgVxd8NhMMzNZRyMIiUrEbKyc1ucnnvDkicCgYEA12xm
L6B5pfjJGy3L1vFPo93tRG5qoHZsYiJ0cc12vTpyQmAm9h6cVEuCniO8OyG7BbJF
swBz9y0TTa3Awa9QAoGmKEFH+Qf8W+RuDpGIjdYZLxr05xhH8X4ZFi6LI4irfPti
CujqG2IgtSoPvxqGj0vALZRDR8VKiGA8srxnJQkCgYB8VM3ELIYovy3rA168/b6G
MBv4SnP2WQnI90R7p2AvSulFikPwHJydRk9mvGGiPhew4H0uMMsf55WDZ0GLaPL2
N6SuxGYzQdb7wRHq4DsXB7dOULcZBoEj7z7bWz62/q0I8Knp+yWypwbndeiau9Mr
HSS2jcLhuKfN1V2gR12VjwKBgHMPVtUBZXgclW2K3GEFqn/fvSbbwt/J4MHZnVBb
aZxQZ07EhIrYdq8fVbiZZaQ/s+CrA0dEaqwOy0ymDVpmBNoR3WmK1KJSfZunOpFV
chYv0Gu0fjIgaey2aTfLzE1CZjXvHsKs/L17f/TDbn2n8U8AKrktg3IGEnUc0c61
inHhAoGBAJy4gBQWN/6wPLPBj7inWDS1wdeF2I5/fdgueZJoXvjnbQCGR9rVgNf5
6mN1EUWGiMS8JEvZXVDv7pMA9NpbvTTYURt6jduawZ1GSHYiJBgcCt2qCe/Ab7d8
SWsDBkRsIoBa7snH3mggATxA3xPGKDtbyL45GdY0hhtDPouj5Tuf
-----END RSA PRIVATE KEY-----
vipin@vipin:.ssh$ openssl rsa -text -in id_rsa
Private-Key: (2048 bit)
modulus:
    00:ce:0d:2d:48:a0:ea:0a:5b:3d:16:41:22:c5:0e:
    f7:e9:6d:b8:16:c7:6e:90:d4:f5:0f:d4:06:b8:0e:
    4a:79:37:c6:7c:c8:20:fd:60:f5:0b:ef:0e:47:c6:
    29:ab:2d:27:d8:e1:e4:2a:bb:f5:24:63:a7:49:9b:
    f7:4c:b4:5f:7f:91:c9:71:5f:0e:b3:91:2f:a1:09:
    5e:2c:23:2f:76:6b:70:31:57:67:2f:5b:9d:a8:ce:
    67:d3:46:2d:21:4a:da:34:30:2a:27:4c:35:00:22:
    3f:0b:c4:d0:89:24:72:4d:c4:ca:e5:2a:d6:d3:8f:
    fc:20:b9:4c:cd:25:2b:39:ea:eb:8a:be:ff:21:30:
    48:9c:28:da:37:f6:1e:56:ed:c7:aa:4c:e2:ae:2a:
    b9:fa:77:f0:b8:0e:16:e1:0b:19:30:79:d5:b7:01:
    6b:ac:04:b0:15:04:16:d9:c3:56:c6:c2:1b:1b:78:
    b5:a8:b1:e3:24:73:2b:a3:1b:d3:16:0f:57:04:f6:
    9c:f8:6e:a1:23:88:87:f8:7c:20:e2:81:29:ed:6d:
    02:90:54:70:35:15:4c:38:93:1a:93:18:31:69:4b:
    bd:fa:74:3a:b2:3b:42:28:a4:41:96:7e:eb:6c:c3:
    0e:ed:30:fd:a5:a4:5e:60:48:1d:5f:97:98:0f:b0:
    c6:5f
publicExponent: 65537 (0x10001)
privateExponent:
    53:69:5e:25:82:8e:7b:b6:c7:99:d4:b0:60:99:58:
    9e:74:3e:0b:6a:9c:45:a1:0f:bb:62:97:7d:b6:bb:
    4b:2a:da:fc:f4:7e:f6:53:63:9f:7b:1c:8a:cd:9b:
    5c:a2:20:f9:59:28:66:6c:44:26:80:f8:dd:81:77:
    b0:e3:6b:ad:56:b4:f7:62:05:af:87:5c:82:92:2a:
    3f:2f:d7:2c:d6:fd:49:dc:19:f7:3f:dd:28:d2:b5:
    90:ff:5d:91:96:9d:92:76:d4:f9:a7:8d:e5:09:f7:
    ff:a9:a2:c9:81:a9:8b:f5:d8:34:c1:0c:ca:04:05:
    8a:b1:b8:77:6b:4e:7e:58:f2:c0:2d:22:ed:f9:dc:
    fe:63:c5:9a:23:a1:9f:2d:94:31:56:55:67:ff:b5:
    fb:e2:4d:e0:62:d9:6e:01:34:c5:5d:74:c2:a9:cd:
    34:d0:79:a1:2c:37:83:98:c3:81:49:42:36:be:9f:
    4d:d3:2a:e6:e3:d7:19:39:f6:97:43:8e:f4:5d:58:
    61:88:20:7f:49:32:da:d5:fc:41:5e:28:42:2e:ee:
    d4:6e:66:25:d2:f2:96:fc:8e:af:c9:66:37:da:cb:
    fb:ab:0f:c0:c7:7a:5a:9e:19:22:fe:78:0d:62:16:
    98:29:82:86:96:af:91:e1:a8:32:82:fa:66:90:ec:
    61
prime1:
    00:f4:dc:dd:e7:89:da:7b:ba:a9:10:18:91:cc:f0:
    04:95:a2:3d:29:95:7c:12:39:87:7f:32:4c:e0:24:
    66:ec:0f:7b:8f:8e:37:6c:5c:32:d1:b0:03:6c:7a:
    32:cf:33:81:0e:bb:c5:6e:43:7a:4d:0e:fd:3a:fc:
    f7:f3:57:53:7c:58:bc:ed:89:94:d5:77:38:64:ee:
    bd:f8:76:45:9d:b0:8c:9c:e8:17:e4:78:ac:77:0f:
    52:a6:89:f3:91:e8:91:3d:ac:27:21:ae:30:ae:05:
    71:77:c3:61:30:cc:cd:65:1c:8c:22:25:2b:11:b2:
    b2:73:5b:9c:9e:7b:c3:92:27
prime2:
    00:d7:6c:66:2f:a0:79:a5:f8:c9:1b:2d:cb:d6:f1:
    4f:a3:dd:ed:44:6e:6a:a0:76:6c:62:22:74:71:cd:
    76:bd:3a:72:42:60:26:f6:1e:9c:54:4b:82:9e:23:
    bc:3b:21:bb:05:b2:45:b3:00:73:f7:2d:13:4d:ad:
    c0:c1:af:50:02:81:a6:28:41:47:f9:07:fc:5b:e4:
    6e:0e:91:88:8d:d6:19:2f:1a:f4:e7:18:47:f1:7e:
    19:16:2e:8b:23:88:ab:7c:fb:62:0a:e8:ea:1b:62:
    20:b5:2a:0f:bf:1a:86:8f:4b:c0:2d:94:43:47:c5:
    4a:88:60:3c:b2:bc:67:25:09
exponent1:
    7c:54:cd:c4:2c:86:28:bf:2d:eb:03:5e:bc:fd:be:
    86:30:1b:f8:4a:73:f6:59:09:c8:f7:44:7b:a7:60:
    2f:4a:e9:45:8a:43:f0:1c:9c:9d:46:4f:66:bc:61:
    a2:3e:17:b0:e0:7d:2e:30:cb:1f:e7:95:83:67:41:
    8b:68:f2:f6:37:a4:ae:c4:66:33:41:d6:fb:c1:11:
    ea:e0:3b:17:07:b7:4e:50:b7:19:06:81:23:ef:3e:
    db:5b:3e:b6:fe:ad:08:f0:a9:e9:fb:25:b2:a7:06:
    e7:75:e8:9a:bb:d3:2b:1d:24:b6:8d:c2:e1:b8:a7:
    cd:d5:5d:a0:47:5d:95:8f
exponent2:
    73:0f:56:d5:01:65:78:1c:95:6d:8a:dc:61:05:aa:
    7f:df:bd:26:db:c2:df:c9:e0:c1:d9:9d:50:5b:69:
    9c:50:67:4e:c4:84:8a:d8:76:af:1f:55:b8:99:65:
    a4:3f:b3:e0:ab:03:47:44:6a:ac:0e:cb:4c:a6:0d:
    5a:66:04:da:11:dd:69:8a:d4:a2:52:7d:9b:a7:3a:
    91:55:72:16:2f:d0:6b:b4:7e:32:20:69:ec:b6:69:
    37:cb:cc:4d:42:66:35:ef:1e:c2:ac:fc:bd:7b:7f:
    f4:c3:6e:7d:a7:f1:4f:00:2a:b9:2d:83:72:06:12:
    75:1c:d1:ce:b5:8a:71:e1
coefficient:
    00:9c:b8:80:14:16:37:fe:b0:3c:b3:c1:8f:b8:a7:
    58:34:b5:c1:d7:85:d8:8e:7f:7d:d8:2e:79:92:68:
    5e:f8:e7:6d:00:86:47:da:d5:80:d7:f9:ea:63:75:
    11:45:86:88:c4:bc:24:4b:d9:5d:50:ef:ee:93:00:
    f4:da:5b:bd:34:d8:51:1b:7a:8d:db:9a:c1:9d:46:
    48:76:22:24:18:1c:0a:dd:aa:09:ef:c0:6f:b7:7c:
    49:6b:03:06:44:6c:22:80:5a:ee:c9:c7:de:68:20:
    01:3c:40:df:13:c6:28:3b:5b:c8:be:39:19:d6:34:
    86:1b:43:3e:8b:a3:e5:3b:9f
writing RSA key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAzg0tSKDqCls9FkEixQ736W24FsdukNT1D9QGuA5KeTfGfMgg
/WD1C+8OR8Ypqy0n2OHkKrv1JGOnSZv3TLRff5HJcV8Os5EvoQleLCMvdmtwMVdn
L1udqM5n00YtIUraNDAqJ0w1ACI/C8TQiSRyTcTK5SrW04/8ILlMzSUrOerrir7/
ITBInCjaN/YeVu3Hqkziriq5+nfwuA4W4QsZMHnVtwFrrASwFQQW2cNWxsIbG3i1
qLHjJHMroxvTFg9XBPac+G6hI4iH+Hwg4oEp7W0CkFRwNRVMOJMakxgxaUu9+nQ6
sjtCKKRBln7rbMMO7TD9paReYEgdX5eYD7DGXwIDAQABAoIBAFNpXiWCjnu2x5nU
sGCZWJ50PgtqnEWhD7til322u0sq2vz0fvZTY597HIrNm1yiIPlZKGZsRCaA+N2B
d7Dja61WtPdiBa+HXIKSKj8v1yzW/UncGfc/3SjStZD/XZGWnZJ21PmnjeUJ9/+p
osmBqYv12DTBDMoEBYqxuHdrTn5Y8sAtIu353P5jxZojoZ8tlDFWVWf/tfviTeBi
2W4BNMVddMKpzTTQeaEsN4OYw4FJQja+n03TKubj1xk59pdDjvRdWGGIIH9JMtrV
/EFeKEIu7tRuZiXS8pb8jq/JZjfay/urD8DHelqeGSL+eA1iFpgpgoaWr5HhqDKC
+maQ7GECgYEA9Nzd54nae7qpEBiRzPAElaI9KZV8EjmHfzJM4CRm7A97j443bFwy
0bADbHoyzzOBDrvFbkN6TQ79Ovz381dTfFi87YmU1Xc4ZO69+HZFnbCMnOgX5His
dw9SponzkeiRPawnIa4wrgVxd8NhMMzNZRyMIiUrEbKyc1ucnnvDkicCgYEA12xm
L6B5pfjJGy3L1vFPo93tRG5qoHZsYiJ0cc12vTpyQmAm9h6cVEuCniO8OyG7BbJF
swBz9y0TTa3Awa9QAoGmKEFH+Qf8W+RuDpGIjdYZLxr05xhH8X4ZFi6LI4irfPti
CujqG2IgtSoPvxqGj0vALZRDR8VKiGA8srxnJQkCgYB8VM3ELIYovy3rA168/b6G
MBv4SnP2WQnI90R7p2AvSulFikPwHJydRk9mvGGiPhew4H0uMMsf55WDZ0GLaPL2
N6SuxGYzQdb7wRHq4DsXB7dOULcZBoEj7z7bWz62/q0I8Knp+yWypwbndeiau9Mr
HSS2jcLhuKfN1V2gR12VjwKBgHMPVtUBZXgclW2K3GEFqn/fvSbbwt/J4MHZnVBb
aZxQZ07EhIrYdq8fVbiZZaQ/s+CrA0dEaqwOy0ymDVpmBNoR3WmK1KJSfZunOpFV
chYv0Gu0fjIgaey2aTfLzE1CZjXvHsKs/L17f/TDbn2n8U8AKrktg3IGEnUc0c61
inHhAoGBAJy4gBQWN/6wPLPBj7inWDS1wdeF2I5/fdgueZJoXvjnbQCGR9rVgNf5
6mN1EUWGiMS8JEvZXVDv7pMA9NpbvTTYURt6jduawZ1GSHYiJBgcCt2qCe/Ab7d8
SWsDBkRsIoBa7snH3mggATxA3xPGKDtbyL45GdY0hhtDPouj5Tuf
-----END RSA PRIVATE KEY-----

examine a real keypair.

    Choose two distinct prime numbers, such as

        p = 61 {\displaystyle p=61} p=61 and q = 53 {\displaystyle q=53} q=53

    Compute n = pq giving

        n = 61 × 53 = 3233 {\displaystyle n=61\times 53=3233} n=61\times 53=3233

    Compute the Carmichael's totient function of the product as λ(n) = lcm(p − 1, q − 1) giving

        λ ( 3233 ) = lcm ⁡ ( 60 , 52 ) = 780 {\displaystyle \lambda (3233)=\operatorname {lcm} (60,52)=780} {\displaystyle \lambda (3233)=\operatorname {lcm} (60,52)=780}

    Choose any number 1 < e < 780 that is coprime to 780. Choosing a prime number for e leaves us only to check that e is not a divisor of 780.

        Let e = 17 {\displaystyle e=17} e=17

    Compute d, the modular multiplicative inverse of e (mod λ(n)) yielding,

        d = 413 {\displaystyle d=413} {\displaystyle d=413}
        Worked example for the modular multiplicative inverse:
        d × e = 1 mod λ ( n ) {\displaystyle d\times e=1{\bmod {\lambda }}(n)} {\displaystyle d\times e=1{\bmod {\lambda }}(n)}
        413 × 17 = 1 mod 7 80 {\displaystyle 413\times 17=1{\bmod {7}}80} {\displaystyle 413\times 17=1{\bmod {7}}80}

The public key is (n = 3233, e = 17). For a padded plaintext message m, the encryption function is

    c ( m ) = m 17 mod 3 233 {\displaystyle c(m)=m^{17}{\bmod {3}}233} {\displaystyle c(m)=m^{17}{\bmod {3}}233}

The private key is (n = 3233, d = 413). For an encrypted ciphertext c, the decryption function is

    m ( c ) = c 413 mod 3 233 {\displaystyle m(c)=c^{413}{\bmod {3}}233} {\displaystyle m(c)=c^{413}{\bmod {3}}233}

For instance, in order to encrypt m = 65, we calculate

    c = 65 17 mod 3 233 = 2790 {\displaystyle c=65^{17}{\bmod {3}}233=2790} {\displaystyle c=65^{17}{\bmod {3}}233=2790}

To decrypt c = 2790, we calculate

    m = 2790 413 mod 3 233 = 65 {\displaystyle m=2790^{413}{\bmod {3}}233=65} {\displaystyle m=2790^{413}{\bmod {3}}233=65}

Both of these calculations can be computed efficiently using the square-and-multiply algorithm for modular exponentiation. In real-life situations the primes selected would be much larger; in our example it would be trivial to factor n, 3233 (obtained from the freely available public key) back to the primes p and q. e, also from the public key, is then inverted to get d, thus acquiring the private key.

Practical implementations use the Chinese remainder theorem to speed up the calculation using modulus of factors (mod pq using mod p and mod q).

The values dp, dq and qinv, which are part of the private key are computed as follows:

    d p = d mod ( p − 1 ) = 413 mod ( 61 − 1 ) = 53 d q = d mod ( q − 1 ) = 413 mod ( 53 − 1 ) = 49 q inv = q − 1 mod p = 53 − 1 mod 6 1 = 38 ⇒ ( q inv × q ) mod p = 38 × 53 mod 6 1 = 1 {\displaystyle {\begin{aligned}d_{p}={}&d{\bmod {(}}p-1)=413{\bmod {(}}61-1)=53\\d_{q}={}&d{\bmod {(}}q-1)=413{\bmod {(}}53-1)=49\\q_{\text{inv}}={}&q^{-1}{\bmod {p}}=53^{-1}{\bmod {6}}1=38\\\Rightarrow {}&(q_{\text{inv}}\times q){\bmod {p}}=38\times 53{\bmod {6}}1=1\end{aligned}}} {\displaystyle {\begin{aligned}d_{p}={}&d{\bmod {(}}p-1)=413{\bmod {(}}61-1)=53\\d_{q}={}&d{\bmod {(}}q-1)=413{\bmod {(}}53-1)=49\\q_{\text{inv}}={}&q^{-1}{\bmod {p}}=53^{-1}{\bmod {6}}1=38\\\Rightarrow {}&(q_{\text{inv}}\times q){\bmod {p}}=38\times 53{\bmod {6}}1=1\end{aligned}}}

Here is how dp, dq and qinv are used for efficient decryption. (Encryption is efficient by choice of a suitable d and e pair)

    m 1 = c d p mod p = 2790 53 mod 6 1 = 4 m 2 = c d q mod q = 2790 49 mod 5 3 = 12 h = ( q inv × ( m 1 − m 2 ) ) mod p = ( 38 × − 8 ) mod 6 1 = 1 m = m 2 + h × q = 12 + 1 × 53 = 65 {\displaystyle {\begin{aligned}m_{1}&=c^{d_{p}}{\bmod {p}}=2790^{53}{\bmod {6}}1=4\\m_{2}&=c^{d_{q}}{\bmod {q}}=2790^{49}{\bmod {5}}3=12\\h&=(q_{\text{inv}}\times (m_{1}-m_{2})){\bmod {p}}=(38\times -8){\bmod {6}}1=1\\m&=m_{2}+h\times q=12+1\times 53=65\end{aligned}}} {\displaystyle {\begin{aligned}m_{1}&=c^{d_{p}}{\bmod {p}}=2790^{53}{\bmod {6}}1=4\\m_{2}&=c^{d_{q}}{\bmod {q}}=2790^{49}{\bmod {5}}3=12\\h&=(q_{\text{inv}}\times (m_{1}-m_{2})){\bmod {p}}=(38\times -8){\bmod {6}}1=1\\m&=m_{2}+h\times q=12+1\times 53=65\end{aligned}}}

----------------------------------

whois icicibank.com     --->  to know wom this certificate is used.

openssl crl -in <crl.crl> -inform DER -text -noout    -->> to check certificate revocation list.

openssl x509 -in icicibank.com  -text -noout
echo "<base64cert>" |base64 -d|openssl x509 -inform DER|openssl x509 -text -noout
 
openssl dgst -binary -sha1 file | openssl enc -base64

http://schemas.xmlsoap.org/specs/ws-security/WS-Security-Appnote.htm

openssl x509 -pubkey -noout -in cert.pem  > pubkey.pem

openssl x509 -pubkey -noout -in cert.pem  > pubkey.pem
openssl rsautl -in pass.txt -out pass.enc -pubin -inkey key.pub -encrypt

https://www.czeskis.com/random/openssl-encrypt-file.html
**************************************************************************

Kerberos  Videos :
 https://youtu.be/_44CHD3Vx-0
 https://youtu.be/5N242XcKAsM

*************************************************************************



